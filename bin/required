#!/usr/bin/env node

var fs = require('fs');
var os = require('os');
var path = require('path');

var usage = function() {

  console.log('\nUsage: node-required [options] jsfilename\n');
  console.log('Outputs a listing of dependencies (filenames)\n');
  console.log('Options:\n');
  console.log('  -h              help');
  console.log('  -i              include jsfilename in listing');
  console.log('  -j              output as json array');
  console.log('  -x [module]     exclude module name from listing');
  console.log('  -x [another]    exclude another module name');
  // console.log('  -t                    include tree in output');
  console.log('\n');

}

var args = process.argv.slice(2);

var filename;

var includeSelf = false;
var asJson = false;
var withTree = false;
var excludeNext = false;
var excluded = [];

args.forEach(function(arg) {

  if (excludeNext) {
    excludeNext = false;
    excluded.push(arg);
    return;
  }
  
  if (arg[0] !== '-') return filename = arg;
  
  for (var i = 1; i < arg.length; i++) {

    switch(arg[i]) {

      case 'h':

        usage();
        process.exit(1);

      case 'i':

        includeSelf = true;
        break;

      case 'j':

        asJson = true;
        break;

      case 'x':

        excludeNext = true;
        break;


      // case 't':

      //   withTree = true;
      //   asJson = true;

    }

  }

});

if (!filename) {
  usage();
  process.exit(1)
}

var dir = path.dirname(filename);     
                                // windows?
if (dir[0] != '/' && dir[1] != ':') {
  dir = path.normalize(process.cwd() + path.sep + dir);
}

var commenting = false;
var content = fs.readFileSync(filename).toString();
var cleared = '';

// remove block comments

for (var i = 0; i < content.length; i++) {
  if (content[i] == '/' && content[i + 1] == '*') commenting = true;
  if (content[i] == '*' && content[i + 1] == '/') commenting = false;
  if (!commenting) cleared += content[i];
}

var modules = cleared.split(os.EOL)

// remove line comments

.map(function(line) {
  var place = line.indexOf('//');
  if (place < 0) return line;
  return line.substr(0, place);
})

// find require("thing") or require('thing')

.map(function(line) {
  var match = line.match(/require\w*\('(.*)'\)/);
  if (match) return match[1];
  match = line.match(/require\w*\("(.*)"\)/);
  if (match) return match[1];
})

// remove where none found on line

.filter(function(name) {
  return !!name;
})

// Reset module path relative to filename
// (might be some issues here through windows)

var pathParts = dir.split(path.sep);

var newPaths = [];

for (var i = 0; i < pathParts.length; i++) {
  newPaths.unshift(pathParts.slice(0, i + 1).join(path.sep) + path.sep + 'node_modules');
}

module.paths = newPaths;

// Require all modules

// But first ensure eny noise they make is silenced

var original = process.stdout.write;
process.stdout.write = function() {};
process.stderr.write = function() {};


var lstatSync = fs.lstatSync;
fs.lstatSync = function(name) {
  var last = name.split(path.sep).pop()
  if (excluded.indexOf(last) >= 0 ) {
    throw new Error('skip module ' + last);
  }
  return lstatSync.apply(this, arguments);
}


for (var i = 0; i < modules.length; i++) {
  var modulePath = modules[i];
  if (modulePath[0] == '.') {
    modulePath = path.normalize(dir + path.sep + modulePath);
    try {
      require(modulePath);
    } catch (e) {
      modulePath = process.cwd() + path.sep + modulePath;
      try {
        require(modulePath);
      } catch (f) {
        throw e;
      }
    }
  }
  else {
    try {
      require(modulePath);
    } catch (e) {
      if (e.message.match(/^skip module/)) continue;
      throw e;
    }
  }
}

var files = Object.keys(require.cache);

files = files.filter(function(file) {
  return file !== __filename;
})

// results

process.stdout.write = original;


// var tree = {};
// var keys = [];
// files.forEach(function(file) {
// });

if (includeSelf) {
  if (filename[0] != '/' && filename[1] != ':') {
    files.unshift(path.normalize(process.cwd() + path.sep + filename));
  } else {
    files.unshift(filename);
  }
}

if (asJson) {
  console.log(JSON.stringify({files: files /*, tree: tree */}, null, 2));
  return;
}

for (var i = 0; i < files.length; i++) {
  console.log(files[i]);
}

